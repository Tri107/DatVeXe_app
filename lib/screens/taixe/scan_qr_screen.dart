import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:mobile_scanner/mobile_scanner.dart';

import '../../config/api.dart';

class ScanQRScreen extends StatefulWidget {
  final int chuyenId;
  const ScanQRScreen({super.key, required this.chuyenId});

  @override
  State<ScanQRScreen> createState() => _ScanQRScreenState();
}

class _ScanQRScreenState extends State<ScanQRScreen> {
  bool isScanning = true;
  bool _isSnackBarShown = false;

  Future<void> _handleScan(String data) async {
    if (!isScanning) return;
    setState(() => isScanning = false);

    try {
      // üß© Gi·∫£i m√£ d·ªØ li·ªáu QR
      Map<String, dynamic> qr;
      try {
        qr = json.decode(data);
      } catch (_) {
        _showOnceSnackBar('M√£ QR kh√¥ng h·ª£p l·ªá!');
        _resetScan();
        return;
      }

      // üß© Ki·ªÉm tra c√°c kh√≥a c·∫ßn thi·∫øt
      if (!qr.containsKey('Ve_id') || !qr.containsKey('Chuyen_id')) {
        _showOnceSnackBar('QR kh√¥ng ch·ª©a th√¥ng tin h·ª£p l·ªá!');
        _resetScan();
        return;
      }

      final veId = int.tryParse(qr['Ve_id'].toString());
      final chuyenId = int.tryParse(qr['Chuyen_id'].toString());

      if (veId == null || chuyenId == null) {
        _showOnceSnackBar('D·ªØ li·ªáu trong QR kh√¥ng h·ª£p l·ªá!');
        _resetScan();
        return;
      }

      // üß© Ki·ªÉm tra chuy·∫øn kh·ªõp
      if (chuyenId != widget.chuyenId) {
        _showOnceSnackBar('M√£ v√© kh√¥ng thu·ªôc chuy·∫øn n√†y!');
        _resetScan();
        return;
      }

      // ‚úÖ G·ªçi API x√°c th·ª±c QR
      final response = await Api.client.post(
        '/ve/verifyQR',
        data: {'ve_id': veId},
      );

      final result = response.data;

      // Rung nh·∫π khi th√†nh c√¥ng
      HapticFeedback.mediumImpact();

      // Hi·ªán th√¥ng b√°o k·∫øt qu·∫£ t·ª´ server
      _showOnceSnackBar(result['message'] ?? 'ƒêi·ªÉm danh th√†nh c√¥ng!');

      // ‚úÖ Tr·∫£ v·ªÅ veId cho m√†n tr∆∞·ªõc (TripDetailScreen)
      if (mounted) Navigator.pop(context, veId);

    } catch (e) {
      _showOnceSnackBar('L·ªói qu√©t m√£: $e');
    }

    _resetScan();
  }

  void _showOnceSnackBar(String message) {
    if (_isSnackBarShown) return;
    _isSnackBarShown = true;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  Future<void> _resetScan() async {
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;
    setState(() {
      isScanning = true;
      _isSnackBarShown = false; // cho ph√©p hi·ªÉn th·ªã l·∫°i khi qu√©t m·ªõi
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Qu√©t v√© h√†nh kh√°ch'),
        backgroundColor: const Color(0xFF1565C0),
      ),
      body: MobileScanner(
        onDetect: (capture) {
          final barcode = capture.barcodes.first;
          final String? value = barcode.rawValue;
          if (value != null) {
            _handleScan(value);
          }
        },
      ),
    );
  }
}
